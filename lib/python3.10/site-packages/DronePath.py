import numpy as np
import plotly.graph_objects as go

"""
@author 24levinson
@version 12/06/2023
Drone A* Pathfinder
"""

class Node():
    """A node class for A* Pathfinding"""

    def __init__(self, parent=None, position=None):
        self.parent = parent
        self.position = position

        self.g = 0
        self.h = 0
        self.f = 0

    def __eq__(self, other):
        return self.position == other.position

def lowest_value(xcor, ycor, maze):
    for z in range(maze[xcor][ycor].size-2, -1, -1):
        if maze[xcor][ycor][z] == 1:
            return z + 1
    return 0

def astar(maze, start, end, open_position_list, closed_position_list):
    """Returns a list of tuples as a path from the given start to the given end in the given maze"""

    # Create start and end node
    start_node = Node(None, (start[0], start[1], lowest_value(start[0], start[1], maze)))
    start_node.g = start_node.h = start_node.f = 0
    end_node = Node(None, (end[0], end[1], (lowest_value(end[0], end[1], maze) if lowest_value(end[0], end[1], maze) > 16 else 16)))
    end_node.g = end_node.h = end_node.f = 0

    # Initialize both open and closed list
    open_list = []
    closed_list = []

    # Add the start node
    current_node = start_node
    if start_node.position[2] < 16:
        closed_list.append(start_node)
        for height in range(start_node.position[2], 16):
            current_node = Node(current_node, (start[0], start[1], height))
            closed_list.append(current_node)
        current_node = Node(current_node, (start[0], start[1], 16))
    open_list.append(current_node)
    # Loop until you find the end
    while len(open_list) > 0:

        # Get the current node
        current_node = open_list[0]
        current_index = 0
        for index, item in enumerate(open_list):
            if item.f < current_node.f:
                current_node = item
                current_index = index

        # Pop current off open list, add to closed list
        open_list.pop(current_index)
        closed_list.append(current_node)

        # Found the goal
        if current_node == end_node:
            if lowest_value(end[0], end[1], maze) < 16:
                for height in range(15, lowest_value(end[0], end[1], maze)-1, -1):
                    current_node = Node(current_node, (end[0], end[1], height))
                    closed_list.append(current_node)
            path = []
            current = current_node
            while current is not None:
                path.append(current.position)
                current = current.parent

            open_position_list.extend((node.g, node.position) for node in open_list)
            closed_position_list.extend((node.g, node.position) for node in closed_list)

            return path[::-1]  # Return reversed path


        # Generate children
        children = []
        for new_position in [(0, -1, 0), (0, 1, 0), (-1, 0, 0), (1, 0, 0), (0, 0, -1), (0, 0, 1), (-1, -1, -1), (0, -1, -1), (1, -1, -1), (-1, -1, 0), (1, -1, 0), (-1, -1, 1), (0, -1, 1), (1, -1, 1), (-1, 0, -1), (1, 0, -1), (-1, 0, 1), (1, 0, 1), (-1, 1, -1), (0, 1, -1), (1, 1, -1), (-1, 1, 0), (1, 1, 0), (-1, 1, 1), (0, 1, 1), (1, 1, 1)]: # Adjacent squares

            # Get node position
            node_position = (current_node.position[0] + new_position[0], current_node.position[1] + new_position[1], current_node.position[2] + new_position[2])

            # Make sure within range
            if node_position[0] > (len(maze) - 1) or node_position[0] < 0 or node_position[1] > (len(maze[len(maze)-1]) -1) or node_position[1] < 0 or node_position[2] > (len(maze[len(maze[len(maze)-1])-1]) -1) or node_position[2] < 0:
                continue

            # Make sure walkable terrain
            if maze[node_position[0]][node_position[1]][node_position[2]] != 0:
                continue

            # Create new node
            new_node = Node(current_node, node_position)

            # Append
            children.append(new_node)

        # Loop through children
        for child in children:

            # Child is on the closed list
            if any(closed_child.position == child.position for closed_child in closed_list):
                continue

            # Create the f, g, and h values
            child.g = current_node.g + 1
            child.h = ((child.position[0] - end_node.position[0]) ** 2) + ((child.position[1] - end_node.position[1]) ** 2) + ((child.position[2] - (lowest_value(end[0], end[1], maze) if lowest_value(end[0], end[1], maze) > 16 else 16)) ** 2)
            child.f = child.g + child.h

            # Child is already in the open list
            if not any(open_node.position == child.position and open_node.g < child.g for open_node in open_list):
                # Add the child to the open list
                open_list.append(child)
    closed_position_list.extend((node.g, node.position) for node in closed_list)
    return[]

def main():
    maze_size = 100
    maze = np.zeros((maze_size, maze_size, maze_size), dtype=int)
    for i in range(maze_size):
        for j in range(maze_size):
            for k in range(maze_size):
                maze[i][j][k] = 1 if int(np.sin(i * np.pi/8) * np.cos(j * np.pi/8) * 20 + 25 * np.sin(i * np.pi/4) * np.cos(j * np.pi/4) + 13 * np.sin(i * np.pi/10) * np.cos(j * np.pi/10)) >= k else 0
    start = (40, 68)
    end1 = (91, 56)
    end2 = (8, 22)
    end3 = (54, 90)

    open_position_list = []
    closed_position_list = []

    path = astar(maze, start, end1, open_position_list, closed_position_list)
    path2 = astar(maze, start, end2, open_position_list, closed_position_list)
    path3 = astar(maze, start, end3, open_position_list, closed_position_list)

    def line_length(path):
        length = 0.0
        prev = path[0]
        for pos in range(1, len(path)):
            length += np.sqrt(((path[pos][0]-prev[0]) ** 2) + ((path[pos][1]-prev[1]) ** 2) + ((path[pos][2]-prev[2]) ** 2))
            prev = path[pos]
        return length

   ## print('Closed List:', closed_position_list)
   ## print('Open List:', open_position_list)
    print('Path 1', path)
    print('Path 2', path2)
    print('Path 3', path3)
    print('Line Length 1: ' + str(line_length(path)))
    print('Line Length 2: ' + str(line_length(path2)))
    print('Line Length 3: ' + str(line_length(path3)))

    def visualize_maze_interactive_plotly(maze, path, path2, path3):
        x, y, z = np.where(maze == 1)

        fig = go.Figure(data=[go.Scatter3d(x=x, y=y, z=z, mode='markers', marker=dict(color='green', size=2))])
        for node in path:
            x_node, y_node, z_node = node
            fig.add_trace(go.Scatter3d(x=[x_node], y=[y_node], z=[z_node], mode='lines+markers',
                                       marker=dict(color='red', size=5)))
        for node in path2:
            x_node, y_node, z_node = node
            fig.add_trace(go.Scatter3d(x=[x_node], y=[y_node], z=[z_node], mode='lines+markers',
                                       marker=dict(color='blue', size=5)))
        for node in path3:
            x_node, y_node, z_node = node
            fig.add_trace(go.Scatter3d(x=[x_node], y=[y_node], z=[z_node], mode='lines+markers',
                                       marker=dict(color='orange', size=5)))

        fig.update_layout(scene=dict(xaxis_title='X', yaxis_title='Y', zaxis_title='Z'),
                          title='Interactive 3D Maze Visualization')

        fig.show()

    # Your maze generation code here
    # ...

    # Assuming 'maze' is your generated maze
    visualize_maze_interactive_plotly(maze, path, path2, path3)

if __name__ == '__main__':
    main()